meta:
  product: "STELLMOTOR"      # product name in uppercase
  horizon_min: 480           # one shift in minutes (8h)
  scenario: "BASELINE"       # scenario name
  data_source: "ASSUMED"     # placeholders until measured
  seed: 42            # random seed for reproducibility

resources:
  workers_total: 20       # total operators available in the learning factory (assumption)
  shifts_per_day: 1       # number of shifts (baseline)
  shift_length_min: 480   # minutes per shift (matches horizon_min in meta)
  repair_tech: 0          # e.g., if we simulate machine failures later

buffers:
  neu_lager:         { capacity: 500 }    # new parts store (forward flow supply)
  reman_lager:       { capacity: 200 }    # store for reusable parts from reverse flow
  blaue_kisten:      { capacity: 60 }     # temporary bins between Befundung/Demontage
  lager1:            { capacity: 100 }    # buffer feeding Pressen/Fügen
  lager2:            { capacity: 100 }    # second buffer feeding downstream steps
  scrap_bin:         { capacity: 999999 } # <- for failed inspections
  warenannahme:      { capacity: 200 }    # goods receipt for returns
  after_pressen_1: { capacity: 9999 }    # temporary WIP after the first press REMOVE THIS LATER
  after_pressen_2: { capacity: 9999 }   # TEMP: remove once pressen_3 is connected
  after_pressen_3: { capacity: 9999 }   # TEMP: remove once pressen_4 is connected

arrivals:
  new_orders:                      # incoming demand
    type: "poisson"                # order arrivals are random
    rate_per_min: 0.8              # average 0.8 per minute → ~384 per shift
  returns:                         # returned products for reman
    type: "batched"
    batch_mean: 5                  # avg 5 per return
    interarrival_min: 10           # every 10 minutes a batch arrives

forward_flow:
# NOTE: lager1/lager2 feed the main line before pressen_1 (reman + new parts merge here)
  - { id: pressen_1,     machines: 1, workers_required: 1, cycle_time_s: 30, batch: 1 }
  - { id: pressen_2,     machines: 1, workers_required: 1, cycle_time_s: 30, batch: 1 }
  - { id: pressen_3,     machines: 1, workers_required: 1, cycle_time_s: 30, batch: 1 }
  - { id: pressen_4,     machines: 1, workers_required: 1, cycle_time_s: 30, batch: 1 }
  - { id: fuegen_1,      machines: 1, workers_required: 1, cycle_time_s: 40, batch: 1 }
  - { id: magnetisieren, machines: 1, workers_required: 1, cycle_time_s: 50, batch: 1 }
  - { id: schrauben_1,   machines: 1, workers_required: 1, cycle_time_s: 35, batch: 1 }
  - { id: fuegen_2,      machines: 1, workers_required: 1, cycle_time_s: 40, batch: 1 }
  - { id: schrauben_2,   machines: 1, workers_required: 1, cycle_time_s: 35, batch: 1 }
  - { id: pruefstand,    machines: 1, workers_required: 1, cycle_time_s: 45, batch: 1 }
  - { id: kunde,         type: "sink" }   # end of forward flow

reverse_flow:
  - { id: warenannahme, workers_required: 1, cycle_time_s: 20 }                   # optional pre-step
  - { id: befundung_1,  workers_required: 1, cycle_time_s: 40, yield_pass: 0.85 }
  - { id: demontage,    workers_required: 3, cycle_time_s: 120 }                  # main capacity driver
  - { id: blaue_kisten_gate, type: "buffer_push", target: "blaue_kisten" }        # WIP bin from slides
  - { id: reinigung,    workers_required: 1, cycle_time_s: 90,  batch: 5 }        # used in "detailed" mode
  - { id: befundung_2,  workers_required: 1, cycle_time_s: 50, yield_pass: 0.80 } # used in "detailed" mode
  - { id: reman_lager_gate, type: "buffer_push", target: "reman_lager" }
  - { id: merge_to_lager,   type: "merge", targets: ["lager1","lager2"] }         # feeds Pressen → Fügen/Schrauben


rules:                                          # special business rules
  unknown_variant_must_full_demount: true       # if product unknown → full teardown
  auto_station_known_variant_success_prob: 0.75 # if known product → auto station succeeds 75% of time
  mispick_prob_without_traceability: 0.03       # 3% chance of wrong part picked
  time_penalty_per_code_s: 10                   # scanning penalty in seconds if no traceability
  reverse_mode: "detailed"
